require_relative '../../node_modules/@capacitor/ios/scripts/pods_helpers'

platform :ios, '14.0'
use_frameworks! :linkage => :static

# workaround to avoid Xcode caching of Pods that requires
# Product -> Clean Build Folder after new Cordova plugins installed
# Requires CocoaPods 1.6 or newer
install! 'cocoapods', :disable_input_output_paths => false

def capacitor_pods
  pod 'Capacitor', :path => '../../node_modules/@capacitor/ios'
  pod 'CapacitorCordova', :path => '../../node_modules/@capacitor/ios'
  pod 'CapacitorGeolocation', :path => '../../node_modules/@capacitor/geolocation'
  pod 'CapacitorSplashScreen', :path => '../../node_modules/@capacitor/splash-screen'
end

target 'App' do
  capacitor_pods
  # Add your Pods here
end

post_install do |installer|
  assertDeploymentTarget(installer)

  # App user project (App.xcodeproj): disable sandboxing + patch CocoaPods script phases
  installer.aggregate_targets.each do |aggregate_target|
    project = aggregate_target.user_project

    # Project-level setting
    project.build_configurations.each do |config|
      config.build_settings['ENABLE_USER_SCRIPT_SANDBOXING'] = 'NO'
    end

    # Target-level settings + patch script phases
    project.targets.each do |t|
      t.build_configurations.each do |config|
        config.build_settings['ENABLE_USER_SCRIPT_SANDBOXING'] = 'NO'
      end

      t.build_phases.each do |phase|
        next unless phase.respond_to?(:name)
        case phase.name
        when "[CP] Embed Pods Frameworks"
          phase.show_env_vars_in_log = '0' if phase.respond_to?(:show_env_vars_in_log)
          phase.input_paths ||= []
          phase.input_paths << "${PODS_ROOT}/Target Support Files/Pods-#{t.name}/Pods-#{t.name}-frameworks.sh"
          phase.output_paths ||= []
          phase.output_paths << "$(DERIVED_FILE_DIR)/#{t.name}_pods_frameworks_embedded"
        when "[CP] Copy Pods Resources"
          phase.input_paths ||= []
          phase.input_paths << "${PODS_ROOT}/Target Support Files/Pods-#{t.name}/Pods-#{t.name}-resources.sh"
          phase.output_paths ||= []
          phase.output_paths << "$(DERIVED_FILE_DIR)/#{t.name}_pods_resources_copied"
        when "[CP] Copy XCFrameworks"
          phase.show_env_vars_in_log = '0' if phase.respond_to?(:show_env_vars_in_log)
          phase.input_paths ||= []
          phase.input_paths << "${PODS_ROOT}/Target Support Files/Pods-#{t.name}/Pods-#{t.name}-xcframeworks.sh"
          phase.output_paths ||= []
          phase.output_paths << "$(DERIVED_FILE_DIR)/#{t.name}_pods_xcframeworks_copied"
        end
      end
    end
  end

  # Generated CocoaPods projects (aggregators): disable sandboxing + patch phases
  installer.generated_projects.each do |project|
    # Project-level setting
    project.build_configurations.each do |config|
      config.build_settings['ENABLE_USER_SCRIPT_SANDBOXING'] = 'NO'
    end

    # Target-level settings + patch script phases
    project.targets.each do |t|
      t.build_configurations.each do |config|
        config.build_settings['ENABLE_USER_SCRIPT_SANDBOXING'] = 'NO'
      end

      t.build_phases.each do |phase|
        next unless phase.respond_to?(:name)
        case phase.name
        when "[CP] Embed Pods Frameworks"
          phase.show_env_vars_in_log = '0' if phase.respond_to?(:show_env_vars_in_log)
          phase.input_paths ||= []
          phase.input_paths << "${PODS_ROOT}/Target Support Files/Pods-#{t.name}/Pods-#{t.name}-frameworks.sh"
          phase.output_paths ||= []
          phase.output_paths << "$(DERIVED_FILE_DIR)/#{t.name}_pods_frameworks_embedded"
        when "[CP] Copy Pods Resources"
          phase.input_paths ||= []
          phase.input_paths << "${PODS_ROOT}/Target Support Files/Pods-#{t.name}/Pods-#{t.name}-resources.sh"
          phase.output_paths ||= []
          phase.output_paths << "$(DERIVED_FILE_DIR)/#{t.name}_pods_resources_copied"
        when "[CP] Copy XCFrameworks"
          phase.show_env_vars_in_log = '0' if phase.respond_to?(:show_env_vars_in_log)
          phase.input_paths ||= []
          phase.input_paths << "${PODS_ROOT}/Target Support Files/Pods-#{t.name}/Pods-#{t.name}-xcframeworks.sh"
          phase.output_paths ||= []
          phase.output_paths << "$(DERIVED_FILE_DIR)/#{t.name}_pods_xcframeworks_copied"
        end
      end
    end
  end

  # Pods project: silence warnings + ensure settings
  installer.pods_project.targets.each do |target|
    target.build_phases.each do |phase|
      next unless phase.respond_to?(:name)
      case phase.name
      when "[CP] Embed Pods Frameworks"
        phase.show_env_vars_in_log = '0' if phase.respond_to?(:show_env_vars_in_log)
        phase.input_paths ||= []
        phase.input_paths << "${PODS_ROOT}/Target Support Files/Pods-#{target.name}/Pods-#{target.name}-frameworks.sh"
        phase.output_paths ||= []
        phase.output_paths << "$(DERIVED_FILE_DIR)/#{target.name}_pods_frameworks_embedded"
      when "[CP] Copy Pods Resources"
        phase.input_paths ||= []
        phase.input_paths << "${PODS_ROOT}/Target Support Files/Pods-#{target.name}/Pods-#{target.name}-resources.sh"
        phase.output_paths ||= []
        phase.output_paths << "$(DERIVED_FILE_DIR)/#{target.name}_pods_resources_copied"
      when "[CP] Copy XCFrameworks"
        phase.show_env_vars_in_log = '0' if phase.respond_to?(:show_env_vars_in_log)
        phase.input_paths ||= []
        phase.input_paths << "${PODS_ROOT}/Target Support Files/Pods-#{target.name}/Pods-#{target.name}-xcframeworks.sh"
        phase.output_paths ||= []
        phase.output_paths << "$(DERIVED_FILE_DIR)/#{target.name}_pods_xcframeworks_copied"
      end
    end

    target.build_configurations.each do |config|
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '14.0'
      config.build_settings['CLANG_ENABLE_MODULES'] = 'YES'
      config.build_settings['DEFINES_MODULE'] = 'YES'
      config.build_settings['CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER'] = 'NO'
      config.build_settings['ENABLE_USER_SCRIPT_SANDBOXING'] = 'NO'
    end
  end
end
