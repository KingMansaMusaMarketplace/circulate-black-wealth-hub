require_relative '../../node_modules/@capacitor/ios/scripts/pods_helpers'

platform :ios, '14.0'
use_frameworks! :linkage => :static

# Disable CocoaPods input/output file lists (fixes xcfilelist errors on Xcode 15/16)
install! 'cocoapods', :disable_input_output_paths => true

def capacitor_pods
  pod 'Capacitor', :path => '../../node_modules/@capacitor/ios'
  pod 'CapacitorCordova', :path => '../../node_modules/@capacitor/ios'
  pod 'CapacitorGeolocation', :path => '../../node_modules/@capacitor/geolocation'
  pod 'CapacitorSplashScreen', :path => '../../node_modules/@capacitor/splash-screen'
end

target 'App' do
  capacitor_pods
  # Add your Pods here
end

post_install do |installer|
  assertDeploymentTarget(installer)

  # User project: disable script sandboxing (fixes xcfilelist access errors)
  installer.aggregate_targets.each do |aggregate_target|
    project = aggregate_target.user_project
    project.build_configurations.each do |config|
      config.build_settings['ENABLE_USER_SCRIPT_SANDBOXING'] = 'NO'
      config.build_settings['COCOAPODS_DISABLE_INPUT_OUTPUT_PATHS'] = 'YES'
    end
    project.targets.each do |t|
      t.build_configurations.each do |config|
        config.build_settings['ENABLE_USER_SCRIPT_SANDBOXING'] = 'NO'
        config.build_settings['COCOAPODS_DISABLE_INPUT_OUTPUT_PATHS'] = 'YES'
      end
    end
    project.save
  end

  # Pods project: disable sandboxing + dedupe any duplicated "[CP] Copy XCFrameworks" phases
  installer.pods_project.targets.each do |target|
    # Disable sandboxing and set minimum iOS
    target.build_configurations.each do |config|
      config.build_settings['ENABLE_USER_SCRIPT_SANDBOXING'] = 'NO'
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '14.0'
      config.build_settings['COCOAPODS_DISABLE_INPUT_OUTPUT_PATHS'] = 'YES'
    end

    # Remove duplicate Copy XCFrameworks phases if CocoaPods/previous patches created more than one
    copy_phases = target.build_phases.select { |p| p.respond_to?(:name) && p.name == "[CP] Copy XCFrameworks" }
    if copy_phases.length > 1
      copy_phases.drop(1).each { |p| target.build_phases.delete(p) }
    end
  end
end
