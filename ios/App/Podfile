require_relative '../../node_modules/@capacitor/ios/scripts/pods_helpers'
# Force CocoaPods to avoid XCFileLists generation (helps with Xcode 15/16 issues)
ENV['COCOAPODS_DISABLE_INPUT_OUTPUT_PATHS'] = 'YES'

platform :ios, '14.0'
use_frameworks! :linkage => :static

# Disable CocoaPods input/output file lists (fixes xcfilelist errors on Xcode 15/16)
install! 'cocoapods', :disable_input_output_paths => true

def capacitor_pods
  pod 'Capacitor', :path => '../../node_modules/@capacitor/ios'
  pod 'CapacitorCordova', :path => '../../node_modules/@capacitor/ios'
  # Temporarily disabled to resolve IONGeolocationLib duplicate task issues
  # pod 'CapacitorGeolocation', :path => '../../node_modules/@capacitor/geolocation'
  pod 'CapacitorSplashScreen', :path => '../../node_modules/@capacitor/splash-screen'
end

target 'App' do
  capacitor_pods
  # Add your Pods here
end

post_install do |installer|
  assertDeploymentTarget(installer)

  # User project: disable script sandboxing (fixes xcfilelist access errors)
  installer.aggregate_targets.each do |aggregate_target|
    project = aggregate_target.user_project
    project.build_configurations.each do |config|
      config.build_settings['ENABLE_USER_SCRIPT_SANDBOXING'] = 'NO'
      config.build_settings['COCOAPODS_DISABLE_INPUT_OUTPUT_PATHS'] = 'YES'
    end
    project.targets.each do |t|
      t.build_configurations.each do |config|
        config.build_settings['ENABLE_USER_SCRIPT_SANDBOXING'] = 'NO'
        config.build_settings['COCOAPODS_DISABLE_INPUT_OUTPUT_PATHS'] = 'YES'
      end

      # Remove embedding/copy phases that cause duplicate tasks, and scrub any file lists/IO paths
      t.build_phases.each do |p|
        next unless p.respond_to?(:name)
        if p.name == "[CP] Copy XCFrameworks" || p.name == "Embed Pods Frameworks" || p.name.start_with?("[CP]")
          # Delete problematic phases entirely
          if p.name == "[CP] Copy XCFrameworks" || p.name == "Embed Pods Frameworks"
            t.build_phases.delete(p)
            next
          end
          # For other [CP] phases, scrub file lists and IO paths
          if p.respond_to?(:input_file_list_paths) && p.respond_to?(:output_file_list_paths)
            p.input_file_list_paths = []
            p.output_file_list_paths = []
          end
          if p.respond_to?(:input_paths)
            p.input_paths = []
          end
          if p.respond_to?(:output_paths)
            p.output_paths = []
          end
        end
      end
    end
    project.save
  end

  # Pods project: disable sandboxing + dedupe any duplicated "[CP] Copy XCFrameworks" phases
  installer.pods_project.targets.each do |target|
    # Disable sandboxing and set minimum iOS
    target.build_configurations.each do |config|
      config.build_settings['ENABLE_USER_SCRIPT_SANDBOXING'] = 'NO'
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '14.0'
      config.build_settings['COCOAPODS_DISABLE_INPUT_OUTPUT_PATHS'] = 'YES'
    end

    # Aggressively remove problematic phases to avoid duplicate tasks
    if target.name == 'IONGeolocationLib'
      # Remove ALL shell script phases from IONGeolocationLib (eliminates Copy XCFrameworks/filelist usage)
      target.build_phases.select { |p| p.respond_to?(:shell_script) }.each do |p|
        target.build_phases.delete(p)
      end
    else
      # Remove XCFrameworks/Embed phases that can generate duplicates
      target.build_phases.select { |p| p.respond_to?(:name) && ["[CP] Copy XCFrameworks", "Embed Pods Frameworks"].include?(p.name) }.each do |p|
        target.build_phases.delete(p)
      end
    end

    # Ensure remaining Pods-related phases don't reference XCFileLists or direct IO paths
    target.build_phases.each do |p|
      next unless p.respond_to?(:name)
      if p.name.start_with?("[CP]") || p.name.include?("Pods")
        if p.respond_to?(:input_file_list_paths) && p.respond_to?(:output_file_list_paths)
          p.input_file_list_paths = []
          p.output_file_list_paths = []
        end
        if p.respond_to?(:input_paths)
          p.input_paths = []
        end
        if p.respond_to?(:output_paths)
          p.output_paths = []
        end
      end
    end
  end

  # Delete any generated .xcfilelist files on disk to prevent Xcode from referencing them
  begin
    Dir[File.join(installer.sandbox.root, '**', '*.xcfilelist')].each do |f|
      File.delete(f) rescue nil
    end
  rescue => e
    puts "Warning: failed to delete xcfilelist files: #{e}"
  end

  # Persist Pods project changes
  installer.pods_project.save
end